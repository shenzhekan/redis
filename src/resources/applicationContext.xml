<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/cache
	http://www.springframework.org/schema/cache/spring-cache.xsd">

<!-- 
	redis数据库配置 
-->

	<!-- 配置JedisPoolConfig：连接池配置 -->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="50" />   <!-- 最大空闲数 -->
		<property name="maxTotal" value="100"/>   <!-- 最大连接数 -->
		<property name="maxWaitMillis" value="20000"/>   <!-- 最大等待时间 -->
	</bean>

	<!-- 连接工厂设置：个人认为就是连接池的样子 -->
	<bean id="connectionFactory" 
			class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="192.168.1.164"/>
		<property name="port" value="6379"/>
		<property name="password" value="root"/>
		<property name="poolConfig" ref="poolConfig" />
	</bean>
	
	<!-- jdk 序列化 -->
	<bean id="jdkSerializationRedisSerialization"
			class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
	
	<!-- string 序列化 -->
	<bean id="stringRedisSerialization"
			class="org.springframework.data.redis.serializer.StringRedisSerializer"/>

    <!-- json 序列化 -->
    <bean id="jackson2JsonRedisSerialization"
          class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>

	<!-- redisTemplate:模本类  -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="connectionFactory" />
		<!-- defaultSerializer ：在Spring对hash结构的操作中会涉及map等操作，所以这里要明确它的规则 -->
		<!-- 也可以直接设置 ：hashKeySerializer 和   hashValueSerializer -->
		<property name="defaultSerializer" ref="stringRedisSerialization"/>
		<property name="keySerializer" ref="stringRedisSerialization"/>     <!-- 键序列化 -->
		<property name="valueSerializer" ref="jackson2JsonRedisSerialization"/>    <!-- 值序列化 -->
		<property name="hashKeySerializer" ref="stringRedisSerialization"/>
		<property name="hashValueSerializer" ref="stringRedisSerialization"/>
	</bean>
	
	<!-- 缓存管理器 -->
	<!-- 
		使用注解驱动，其中属性cache-manager默认值为cacheManager,
		所以如果你的缓存管理器名称也是cacheManager，则无需重新定义
		我这里为了使用到这个，所以定义的是 redisCacheManager
	 -->
	<cache:annotation-driven cache-manager="redisCacheManager"/>
	<bean id="redisCacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
		<!-- 通过构造的方式注入 redisTemplate --> 
		<constructor-arg index="0" ref="redisTemplate"/>
		<!-- 设置默认的超时时间，单位为秒 -->
		<property name="defaultExpiration" value="600"/>
		<!-- 定义缓存管理器的名称 -->
		<property name="cacheNames">
			<list>
				<value>redisCacheManager</value>
			</list>
		</property>
	</bean>
	
	
	
	<!-- Redis 消息订阅：发布订阅监听类 -->
	<bean id="redisMessageListener" class="com.szk.listener.RedisMessageListener" >
		<property name="redisTemplate" ref="redisTemplate" />
	</bean>
	
	<!-- Redis 监听容器：用于监听Redis的发布订阅消息 -->
	<bean id="topicContainer" class="org.springframework.data.redis.listener.RedisMessageListenerContainer">
	
		<!-- Redis 连接工厂 -->
		<property name="connectionFactory" ref="connectionFactory"/>
		
		<!-- 连接池，这里只要线程池生存，才能继续监听 -->
		<property name="taskExecutor">
			<bean class="org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler">
				<property name="poolSize" value="3"/>
			</bean>
		</property>
		
		<!-- 消息监听Map -->
		<property name="messageListeners">
			<map>
				<!-- 配置监听者，key-ref 和 bean id 定义一致 -->
				<entry key-ref="redisMessageListener" >
					<!-- 监听类 -->
					<bean class="org.springframework.data.redis.listener.ChannelTopic">
						<constructor-arg value="chat" />
					</bean>
				</entry>
			</map>
		</property>
	</bean>
	
<!-- 
	整合mybatis的设置
 -->
	
	<!-- 扫描对应的包 -->
	<context:annotation-config />
	<context:component-scan base-package="com.szk" />
	<context:property-placeholder location="classpath:/jdbc.properties"/>
	
	<!-- dbcp数据库连接池 -->
	<bean id="dbcpDataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
		<property name="url" value="jdbc:mysql://localhost:3306/spring_redis"/>
		<property name="username" value="root"/>
		<property name="password" value="root"/>
	</bean>

	
	<!-- jdbcTemplate -->
	<bean id="jdbcTempalte" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dbcpDataSource" />
	</bean>
	
	<!-- sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dbcpDataSource"/>
		<property name="configLocation" value="classpath:mybatis.xml"/>
	</bean>
	
	<!-- 事务管理的配置 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dbcpDataSource"/>
	</bean>
	
	<!-- 使用注解定义的事务管理 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<!-- 采用自动扫描的方式创建Mapper bean -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.szk.mapper"/>
		<property name="sqlSessionFactory" ref="sqlSessionFactory"/>
		<property name="annotationClass" value="org.springframework.stereotype.Repository"/>
	</bean>
	
</beans>