<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- 配置JedisPoolConfig：连接池配置 -->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="50" />   <!-- 最大空闲数 -->
		<property name="maxTotal" value="100"/>   <!-- 最大连接数 -->
		<property name="maxWaitMillis" value="20000"/>   <!-- 最大等待时间 -->
	</bean>

	<!-- 连接工厂设置：个人认为就是连接池的样子 -->
	<bean id="connectionFactory" 
			class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="192.168.223.130"/>
		<property name="port" value="6379"/>
		<property name="password" value="root"/>
		<property name="poolConfig" ref="poolConfig" />
	</bean>
	
	<!-- jdk 序列化 -->
	<bean id="jdkSerializationRedisSerializer" 
			class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
	
	<!-- string 序列化 -->
	<bean id="StringRedisSerialization" 
			class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
			
	<!-- redisTemplate:模本类  -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="connectionFactory" />
		<!-- defaultSerializer ：在Spring对hash结构的操作中会涉及map等操作，所以这里要明确它的规则 -->
		<!-- 也可以直接设置 ：hashKeySerializer 和   hashValueSerializer -->
		<property name="defaultSerializer" ref="StringRedisSerialization"/>
		<property name="keySerializer" ref="StringRedisSerialization"/>     <!-- 键序列化 -->
		<property name="valueSerializer" ref="StringRedisSerialization"/>    <!-- 值序列化 -->
	</bean>			
	
	<!-- Redis 消息订阅：发布订阅监听类 -->
	<bean id="redisMessageListener" class="com.szk.listener.RedisMessageListener" >
		<property name="redisTemplate" ref="redisTemplate" />
	</bean>
	
	<!-- Redis 监听容器：用于监听Redis的发布订阅消息 -->
	<bean id="topicContainer" class="org.springframework.data.redis.listener.RedisMessageListenerContainer">
	
		<!-- Redis 连接工厂 -->
		<property name="connectionFactory" ref="connectionFactory"/>
		
		<!-- 连接池，这里只要线程池生存，才能继续监听 -->
		<property name="taskExecutor">
			<bean class="org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler">
				<property name="poolSize" value="3"/>
			</bean>
		</property>
		
		<!-- 消息监听Map -->
		<property name="messageListeners">
			<map>
				<!-- 配置监听者，key-ref 和 bean id 定义一致 -->
				<entry key-ref="redisMessageListener" >
					<!-- 监听类 -->
					<bean class="org.springframework.data.redis.listener.ChannelTopic">
						<constructor-arg value="chat" />
					</bean>
				</entry>
			</map>
		</property>
	</bean>
	
	
</beans>